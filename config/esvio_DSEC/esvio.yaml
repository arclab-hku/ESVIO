%YAML:1.0

#common parameters
imu_topic: "/imu/data"
event_left_topic: "/davis/left/events"
event_right_topic: "/davis/right/events"
image_left_topic: "/cam00/image_raw"
image_right_topic: "/cam01/image_raw"


system_mode: 1 # 0 for ESIO, 1 for ESVIO

output_path: "/home/cpy/Datasets/output"

###########################################################################################################################

#camera calibration
cam_left_calib: "cam0_esvio.yaml"
cam_right_calib: "cam1_esvio.yaml"

#event calibration
event_left_calib: "event0_esvio.yaml"
event_right_calib: "event1_esvio.yaml"

image_width: 1440
image_height: 1080

event_width: 640
event_height: 480


###########################################################################################################################
# Transformation between imu and left cam/event

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from left camera frame to imu frame, imu^R_cam . from imu to camera

#### T_cam_imu
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [-0.99973298, -0.00994674, 0.02085725,  
           0.01003579, -0.99994095, 0.00416910,  
           0.02081454, 0.00437730, 0.99977377]
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.04372224 , 0.00101557, -0.01337267]

#### Transformation between imu and left cam/event
extrinsicRotation_event: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [-1.0, 0.0, 0.0,
          0.0, -1.0, 0.0,
          0.0, 0.0, 1.0]
extrinsicTranslation_event: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.0 , 0.0, 0.0]

T_camera_imu: 1  # whether the input is imu to cam. if yes, T_camera_imu = 1 
T_event_imu: 1  # whether the input is imu to cam. if yes, T_camera_imu = 1 


###########################################################################################################################
# Transformation between right and left camera, left to right
Rrl: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.9998379578286035, -0.017926384876108554, 0.0016440226264295469,
           0.017914084504235202, 0.9998135043384297, 0.007214022378586629,
          -0.0017730373650056029, -0.007183402242479184, 0.9999726271607238]

Trl: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.5092603987305321 , -0.0022179629729152214, 0.0042971588717280644 ]

body_T_cam1: !!opencv-matrix # camera right camera to imu
   rows: 4
   cols: 4
   dt: d
   data: [-0.99971667,-0.00772522,0.02251445,-0.55267240,   
           0.00798740,-0.99990108,0.01157780,0.00243932,  
           0.02242277,0.01175434,0.99967948,0.02142666,   
           0.00000000,0.00000000,0.00000000,1.00000000]

###########################################################################################################################
# left event to right event. Rrl_event = (R_l_re)^-1 * R_l_le Rrl_event = (R_l_re)^-1 * R_l_le
Rrl_event: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.99975934,-0.01136185,0.01876572,    
           0.01144476,0.99992518,-0.00431741,  
          -0.01871527,0.00453113,0.99981459] 

Trl_event: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ -0.59901096 , -0.00490041, 0.00160450 ]

body_T_event1: !!opencv-matrix # right event to imu.  R_i_re = (R_l_i)^-1 * R_l_re R_i_re = (R_l_i)^-1 * R_l_re
   rows: 4
   cols: 4
   dt: d
   data: [-0.99975936,-0.01144477,0.01871526,-0.59895293,   
           0.01136184,-0.99992519,-0.00453114,0.00191309,   
           0.01876573,-0.00431740,0.99981458,0.00961552,   
           0.00000000,0.00000000,0.00000000,1.00000000]

###########################################################################################################################
#time surface map
ignore_polarity: 0 #true 1 false 0;
decay_ms: 20 #20
median_blur_kernel_size: 0 #1 or 0
feature_filter_threshold: 0.01

#feature traker paprameters
TS_LK_threshold: 128.0   # the feature detection is based on the time surface
max_cnt: 200            # max feature number in feature tracking event
max_cnt_img: 175                       # max feature number in feature tracking image
min_dist: 30 #10            # min distance between two event features 
min_dist_img: 40 #30            # min distance between two image features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
Num_of_thread: 2        #number of the threads for the big event data process

Do_motion_correction: 0 #whether use motion correction

###########################################################################################################################
#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

###########################################################################################################################

acc_n: 0.3 #4.4011810950619089e-02 #0.2  #0.1 #0.2  #4.4793336127290362e-02        # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.075 #2.9197115508062086e-03 #0.05 #0.025 #0.05 #3.1404034561189407e-03        # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.003 #7.6577511511273218e-04 #0.002  #0.001 #0.002 #8.0169405615955990e-04        # accelerometer bias random work noise standard deviation.  #0.002
gyr_w: 6.0e-5 #3.2163500109799395e-05 #4.0e-5  #2.0e-5 #4.0e-5 #2.8618210492185127e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.80766     # gravity magnitude

###########################################################################################################################

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet).

###########################################################################################################################

#loop closure parameters
loop_closure: 1                    # start loop closure

loop_closure_topic: "/camera/left/image_mono"   
load_previous_pose_graph: 0 #1        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project

#visualization parameters
save_image: 1                   #  (DEBUG_IMAGE)  
visualize_imu_forward: 1        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
save_loop_match: 0              # 
